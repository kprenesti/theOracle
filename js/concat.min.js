var app = angular.module('app', ['ui.router'])
  .config(function($stateProvider, $urlRouterProvider) {
    $urlRouterProvider.otherwise("/");
    $stateProvider
      .state('home', {
        url: '/',
        templateUrl: 'templates/wiki.html',
        controller: 'mainCntrl as mainCntrl'
      })
      .state('results', {
        url: '/results',
        templateUrl: 'templates/results.html',
        controller: 'resultsCntrl as resultsCntrl'
      })
      .state('articleView', {
        url: '/article',
        templateUrl: 'templates/article.html',
        controller: 'articleCntrl as articleCntrl'
      });
    }); //end config

angular.module('app')
  .service('httpSvc', ['$http', '$q', function($http, $q){
    var httpSvc = this;
    httpSvc.searchAPI = function(query){
      var defer = $q.defer();
      var api = 'http://en.wikipedia.org/w/api.php?action=query&format=json&list=search&utf8=1&srsearch=';
      var cb = '&callback=JSON_CALLBACK';
      $http.jsonp(api + query + cb)
        .then(function(response){
          defer.resolve(response.data);
        }.bind(this), //end success
          function(response){
            defer.reject({error: response.data, status: response.status});
          } //end error
        );//end .then
        return defer.promise;
      }; //end searchAPI
  return httpSvc;
}]);

app.controller('articleCntrl', function($scope){
  var vm = $scope;
  
});

app.controller('mainCntrl', ['$http', 'httpSvc', function($http, httpSvc){
  const mainCntrl = this;
   mainCntrl.results = [];
   mainCntrl.submitForm = function(query) {
    httpSvc.searchAPI(query).then(function(data){
      mainCntrl.results.push(data.query.search);
      console.log(mainCntrl.results);
    });
  } //end submitForm

  // this.random = function(){
  //   httpSvc.random(function(response){
  //     return response;
  //   }
  // }
}]);

angular.module('app').controller('resultsCntrl', function($scope){
  var vm = $scope;
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsIlNlcnZpY2VzL2h0dHAuanMiLCJjb250cm9sbGVycy9hcnRpY2xlQ250cmwuanMiLCJjb250cm9sbGVycy9tYWluQ250cmwuanMiLCJjb250cm9sbGVycy9yZXN1bHRzQ250cmwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNuQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNoQkE7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiY29uY2F0LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFwcCA9IGFuZ3VsYXIubW9kdWxlKCdhcHAnLCBbJ3VpLnJvdXRlciddKVxuICAuY29uZmlnKGZ1bmN0aW9uKCRzdGF0ZVByb3ZpZGVyLCAkdXJsUm91dGVyUHJvdmlkZXIpIHtcbiAgICAkdXJsUm91dGVyUHJvdmlkZXIub3RoZXJ3aXNlKFwiL1wiKTtcbiAgICAkc3RhdGVQcm92aWRlclxuICAgICAgLnN0YXRlKCdob21lJywge1xuICAgICAgICB1cmw6ICcvJyxcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd0ZW1wbGF0ZXMvd2lraS5odG1sJyxcbiAgICAgICAgY29udHJvbGxlcjogJ21haW5DbnRybCBhcyBtYWluQ250cmwnXG4gICAgICB9KVxuICAgICAgLnN0YXRlKCdyZXN1bHRzJywge1xuICAgICAgICB1cmw6ICcvcmVzdWx0cycsXG4gICAgICAgIHRlbXBsYXRlVXJsOiAndGVtcGxhdGVzL3Jlc3VsdHMuaHRtbCcsXG4gICAgICAgIGNvbnRyb2xsZXI6ICdyZXN1bHRzQ250cmwgYXMgcmVzdWx0c0NudHJsJ1xuICAgICAgfSlcbiAgICAgIC5zdGF0ZSgnYXJ0aWNsZVZpZXcnLCB7XG4gICAgICAgIHVybDogJy9hcnRpY2xlJyxcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd0ZW1wbGF0ZXMvYXJ0aWNsZS5odG1sJyxcbiAgICAgICAgY29udHJvbGxlcjogJ2FydGljbGVDbnRybCBhcyBhcnRpY2xlQ250cmwnXG4gICAgICB9KTtcbiAgICB9KTsgLy9lbmQgY29uZmlnXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbiAgLnNlcnZpY2UoJ2h0dHBTdmMnLCBbJyRodHRwJywgJyRxJywgZnVuY3Rpb24oJGh0dHAsICRxKXtcbiAgICB2YXIgaHR0cFN2YyA9IHRoaXM7XG4gICAgaHR0cFN2Yy5zZWFyY2hBUEkgPSBmdW5jdGlvbihxdWVyeSl7XG4gICAgICB2YXIgZGVmZXIgPSAkcS5kZWZlcigpO1xuICAgICAgdmFyIGFwaSA9ICdodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93L2FwaS5waHA/YWN0aW9uPXF1ZXJ5JmZvcm1hdD1qc29uJmxpc3Q9c2VhcmNoJnV0Zjg9MSZzcnNlYXJjaD0nO1xuICAgICAgdmFyIGNiID0gJyZjYWxsYmFjaz1KU09OX0NBTExCQUNLJztcbiAgICAgICRodHRwLmpzb25wKGFwaSArIHF1ZXJ5ICsgY2IpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXtcbiAgICAgICAgICBkZWZlci5yZXNvbHZlKHJlc3BvbnNlLmRhdGEpO1xuICAgICAgICB9LmJpbmQodGhpcyksIC8vZW5kIHN1Y2Nlc3NcbiAgICAgICAgICBmdW5jdGlvbihyZXNwb25zZSl7XG4gICAgICAgICAgICBkZWZlci5yZWplY3Qoe2Vycm9yOiByZXNwb25zZS5kYXRhLCBzdGF0dXM6IHJlc3BvbnNlLnN0YXR1c30pO1xuICAgICAgICAgIH0gLy9lbmQgZXJyb3JcbiAgICAgICAgKTsvL2VuZCAudGhlblxuICAgICAgICByZXR1cm4gZGVmZXIucHJvbWlzZTtcbiAgICAgIH07IC8vZW5kIHNlYXJjaEFQSVxuICByZXR1cm4gaHR0cFN2Yztcbn1dKTtcbiIsImFwcC5jb250cm9sbGVyKCdhcnRpY2xlQ250cmwnLCBmdW5jdGlvbigkc2NvcGUpe1xuICB2YXIgdm0gPSAkc2NvcGU7XG4gIFxufSk7XG4iLCJhcHAuY29udHJvbGxlcignbWFpbkNudHJsJywgWyckaHR0cCcsICdodHRwU3ZjJywgZnVuY3Rpb24oJGh0dHAsIGh0dHBTdmMpe1xuICBjb25zdCBtYWluQ250cmwgPSB0aGlzO1xuICAgbWFpbkNudHJsLnJlc3VsdHMgPSBbXTtcbiAgIG1haW5DbnRybC5zdWJtaXRGb3JtID0gZnVuY3Rpb24ocXVlcnkpIHtcbiAgICBodHRwU3ZjLnNlYXJjaEFQSShxdWVyeSkudGhlbihmdW5jdGlvbihkYXRhKXtcbiAgICAgIG1haW5DbnRybC5yZXN1bHRzLnB1c2goZGF0YS5xdWVyeS5zZWFyY2gpO1xuICAgICAgY29uc29sZS5sb2cobWFpbkNudHJsLnJlc3VsdHMpO1xuICAgIH0pO1xuICB9IC8vZW5kIHN1Ym1pdEZvcm1cblxuICAvLyB0aGlzLnJhbmRvbSA9IGZ1bmN0aW9uKCl7XG4gIC8vICAgaHR0cFN2Yy5yYW5kb20oZnVuY3Rpb24ocmVzcG9uc2Upe1xuICAvLyAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAvLyAgIH1cbiAgLy8gfVxufV0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpLmNvbnRyb2xsZXIoJ3Jlc3VsdHNDbnRybCcsIGZ1bmN0aW9uKCRzY29wZSl7XG4gIHZhciB2bSA9ICRzY29wZTtcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
