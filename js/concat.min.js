var app = angular.module('app', ['ui.router'])
  .config(function($stateProvider, $urlRouterProvider) {
    $urlRouterProvider.otherwise("/");
    $stateProvider
      .state('home', {
        url: '/',
        templateUrl: 'templates/wiki.html',
        controller: 'mainCntrl as mainCntrl'
      })
      .state('results', {
        url: '/results',
        templateUrl: 'templates/results.html',
        controller: 'resultsCntrl as resultsCntrl'
      })
      .state('articleView', {
        url: '/article',
        templateUrl: 'templates/article.html',
        controller: 'articleCntrl as articleCntrl'
      });
    }); //end config

angular.module('app')
  .service('httpSvc', ['$http', '$q', function($http, $q){
    var httpSvc = this;
    httpSvc.searchAPI = function(query){
      var defer = $q.defer();
      var api = 'https://en.wikipedia.org/w/api.php?format=json&action=query&generator=search&gsrnamespace=0&gsrlimit=10&prop=pageimages|extracts&pilimit=max&exintro&explaintext&exsentences=2&exlimit=max&gsrsearch=';
      var cb = '&callback=JSON_CALLBACK';
      $http.jsonp(api + query + cb)
        .then(function(response){
          defer.resolve(response.data);
        }.bind(this), //end success
          function(response){
            defer.reject({error: response.data, status: response.status});
          } //end error
        );//end .then
        return defer.promise;
      }; //end searchAPI

  return httpSvc;
}])


.service('results', function(){
  this.returnResults = function(){
    return this.list;
  }
});

app.controller('articleCntrl', function($scope){
  var vm = $scope;
  
});

app.controller('mainCntrl', ['$http', 'httpSvc', 'results', '$state', function($http, httpSvc, results, $state){
  var main = this;
  //  main.results = [];
   main.submitForm = function(query) {
    httpSvc.searchAPI(query)
    .then(function(data){
      var resultsArray = [];
      var articles = data.query.pages;
      for (var prop in articles){
        resultsArray.push(articles[prop]);
      }
      results.list = resultsArray;
      console.log(results.list);
    });
    $state.go('results');
  } //end submitForm

  main.getRandom = function(){
    $state.go('article');
  }
}]);

angular.module('app').controller('resultsCntrl', ['$state', 'results', function($state, results){
  var List = this;
  List.results = results.returnResults();
  console.log(List.results);
}]);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsIlNlcnZpY2VzL2h0dHAuanMiLCJjb250cm9sbGVycy9hcnRpY2xlQ250cmwuanMiLCJjb250cm9sbGVycy9tYWluQ250cmwuanMiLCJjb250cm9sbGVycy9yZXN1bHRzQ250cmwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDM0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3JCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiY29uY2F0LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFwcCA9IGFuZ3VsYXIubW9kdWxlKCdhcHAnLCBbJ3VpLnJvdXRlciddKVxuICAuY29uZmlnKGZ1bmN0aW9uKCRzdGF0ZVByb3ZpZGVyLCAkdXJsUm91dGVyUHJvdmlkZXIpIHtcbiAgICAkdXJsUm91dGVyUHJvdmlkZXIub3RoZXJ3aXNlKFwiL1wiKTtcbiAgICAkc3RhdGVQcm92aWRlclxuICAgICAgLnN0YXRlKCdob21lJywge1xuICAgICAgICB1cmw6ICcvJyxcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd0ZW1wbGF0ZXMvd2lraS5odG1sJyxcbiAgICAgICAgY29udHJvbGxlcjogJ21haW5DbnRybCBhcyBtYWluQ250cmwnXG4gICAgICB9KVxuICAgICAgLnN0YXRlKCdyZXN1bHRzJywge1xuICAgICAgICB1cmw6ICcvcmVzdWx0cycsXG4gICAgICAgIHRlbXBsYXRlVXJsOiAndGVtcGxhdGVzL3Jlc3VsdHMuaHRtbCcsXG4gICAgICAgIGNvbnRyb2xsZXI6ICdyZXN1bHRzQ250cmwgYXMgcmVzdWx0c0NudHJsJ1xuICAgICAgfSlcbiAgICAgIC5zdGF0ZSgnYXJ0aWNsZVZpZXcnLCB7XG4gICAgICAgIHVybDogJy9hcnRpY2xlJyxcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd0ZW1wbGF0ZXMvYXJ0aWNsZS5odG1sJyxcbiAgICAgICAgY29udHJvbGxlcjogJ2FydGljbGVDbnRybCBhcyBhcnRpY2xlQ250cmwnXG4gICAgICB9KTtcbiAgICB9KTsgLy9lbmQgY29uZmlnXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbiAgLnNlcnZpY2UoJ2h0dHBTdmMnLCBbJyRodHRwJywgJyRxJywgZnVuY3Rpb24oJGh0dHAsICRxKXtcbiAgICB2YXIgaHR0cFN2YyA9IHRoaXM7XG4gICAgaHR0cFN2Yy5zZWFyY2hBUEkgPSBmdW5jdGlvbihxdWVyeSl7XG4gICAgICB2YXIgZGVmZXIgPSAkcS5kZWZlcigpO1xuICAgICAgdmFyIGFwaSA9ICdodHRwczovL2VuLndpa2lwZWRpYS5vcmcvdy9hcGkucGhwP2Zvcm1hdD1qc29uJmFjdGlvbj1xdWVyeSZnZW5lcmF0b3I9c2VhcmNoJmdzcm5hbWVzcGFjZT0wJmdzcmxpbWl0PTEwJnByb3A9cGFnZWltYWdlc3xleHRyYWN0cyZwaWxpbWl0PW1heCZleGludHJvJmV4cGxhaW50ZXh0JmV4c2VudGVuY2VzPTImZXhsaW1pdD1tYXgmZ3Nyc2VhcmNoPSc7XG4gICAgICB2YXIgY2IgPSAnJmNhbGxiYWNrPUpTT05fQ0FMTEJBQ0snO1xuICAgICAgJGh0dHAuanNvbnAoYXBpICsgcXVlcnkgKyBjYilcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe1xuICAgICAgICAgIGRlZmVyLnJlc29sdmUocmVzcG9uc2UuZGF0YSk7XG4gICAgICAgIH0uYmluZCh0aGlzKSwgLy9lbmQgc3VjY2Vzc1xuICAgICAgICAgIGZ1bmN0aW9uKHJlc3BvbnNlKXtcbiAgICAgICAgICAgIGRlZmVyLnJlamVjdCh7ZXJyb3I6IHJlc3BvbnNlLmRhdGEsIHN0YXR1czogcmVzcG9uc2Uuc3RhdHVzfSk7XG4gICAgICAgICAgfSAvL2VuZCBlcnJvclxuICAgICAgICApOy8vZW5kIC50aGVuXG4gICAgICAgIHJldHVybiBkZWZlci5wcm9taXNlO1xuICAgICAgfTsgLy9lbmQgc2VhcmNoQVBJXG5cbiAgcmV0dXJuIGh0dHBTdmM7XG59XSlcblxuXG4uc2VydmljZSgncmVzdWx0cycsIGZ1bmN0aW9uKCl7XG4gIHRoaXMucmV0dXJuUmVzdWx0cyA9IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIHRoaXMubGlzdDtcbiAgfVxufSk7XG4iLCJhcHAuY29udHJvbGxlcignYXJ0aWNsZUNudHJsJywgZnVuY3Rpb24oJHNjb3BlKXtcbiAgdmFyIHZtID0gJHNjb3BlO1xuICBcbn0pO1xuIiwiYXBwLmNvbnRyb2xsZXIoJ21haW5DbnRybCcsIFsnJGh0dHAnLCAnaHR0cFN2YycsICdyZXN1bHRzJywgJyRzdGF0ZScsIGZ1bmN0aW9uKCRodHRwLCBodHRwU3ZjLCByZXN1bHRzLCAkc3RhdGUpe1xuICB2YXIgbWFpbiA9IHRoaXM7XG4gIC8vICBtYWluLnJlc3VsdHMgPSBbXTtcbiAgIG1haW4uc3VibWl0Rm9ybSA9IGZ1bmN0aW9uKHF1ZXJ5KSB7XG4gICAgaHR0cFN2Yy5zZWFyY2hBUEkocXVlcnkpXG4gICAgLnRoZW4oZnVuY3Rpb24oZGF0YSl7XG4gICAgICB2YXIgcmVzdWx0c0FycmF5ID0gW107XG4gICAgICB2YXIgYXJ0aWNsZXMgPSBkYXRhLnF1ZXJ5LnBhZ2VzO1xuICAgICAgZm9yICh2YXIgcHJvcCBpbiBhcnRpY2xlcyl7XG4gICAgICAgIHJlc3VsdHNBcnJheS5wdXNoKGFydGljbGVzW3Byb3BdKTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdHMubGlzdCA9IHJlc3VsdHNBcnJheTtcbiAgICAgIGNvbnNvbGUubG9nKHJlc3VsdHMubGlzdCk7XG4gICAgfSk7XG4gICAgJHN0YXRlLmdvKCdyZXN1bHRzJyk7XG4gIH0gLy9lbmQgc3VibWl0Rm9ybVxuXG4gIG1haW4uZ2V0UmFuZG9tID0gZnVuY3Rpb24oKXtcbiAgICAkc3RhdGUuZ28oJ2FydGljbGUnKTtcbiAgfVxufV0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpLmNvbnRyb2xsZXIoJ3Jlc3VsdHNDbnRybCcsIFsnJHN0YXRlJywgJ3Jlc3VsdHMnLCBmdW5jdGlvbigkc3RhdGUsIHJlc3VsdHMpe1xuICB2YXIgTGlzdCA9IHRoaXM7XG4gIExpc3QucmVzdWx0cyA9IHJlc3VsdHMucmV0dXJuUmVzdWx0cygpO1xuICBjb25zb2xlLmxvZyhMaXN0LnJlc3VsdHMpO1xufV0pO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
